// Update formatting run: npx prisma format
// Update SQLite run: npx prisma migrate dev
// Update JS mapping run: npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Race {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  date      DateTime
  place     String
  organizer String
  visible   Boolean
  event     Event[]
  racer     Racer[]
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  category String

  performance   Performance[]
  ageCoeficient AgeCoeficient[]
  race          Race            @relation(fields: [raceId], references: [id])
  raceId        Int
}

model Measurement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value         Float
  performance   Performance @relation(fields: [performanceId], references: [id])
  performanceId Int
}

model Performance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  measurement Measurement[]

  racer   Racer @relation(fields: [racerId], references: [id])
  racerId Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
}

model Racer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  surname   String
  birthDate DateTime
  sex       String
  club      String

  performace Performance[]
  race       Race          @relation(fields: [raceId], references: [id])
  raceId     Int
}

model AgeCoeficient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  age        Int
  coeficient Float

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
