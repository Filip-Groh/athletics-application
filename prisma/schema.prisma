// Update formatting run: npx prisma format
// Update SQLite run: npx prisma migrate dev
// Update JS mapping run: npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String?
  category String

  subEvent SubEvent[]
  race     Race[]

  @@unique([name, category])
}

model SubEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  a    Float
  b    Float
  c    Float

  performance   Performance[]
  ageCoeficient AgeCoeficient[]

  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  @@unique([name, eventId])
}

model AgeCoeficient {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  age        Int
  coeficient Float

  subEvent   SubEvent @relation(fields: [subEventId], references: [id], onDelete: Cascade)
  subEventId Int

  @@unique([age, subEventId])
}

model Race {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  date      DateTime
  place     String
  organizer String
  visible   Boolean

  event       Event[]
  racer       Racer[]
  performance Performance[]

  owner    User   @relation(name: "owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  managers User[] @relation(name: "manager")
}

model Measurement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value Float?

  performance   Performance @relation(fields: [performanceId], references: [id], onDelete: Cascade)
  performanceId Int
}

model Performance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  measurement Measurement[]
  orderNumber Int

  race       Race     @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId     Int
  subEvent   SubEvent @relation(fields: [subEventId], references: [id], onDelete: Cascade)
  subEventId Int
  racer      Racer    @relation(fields: [racerId], references: [id], onDelete: Cascade)
  racerId    Int

  @@unique([racerId, subEventId, raceId])
}

model Racer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personalData   PersonalData @relation(fields: [personalDataId], references: [id])
  personalDataId Int

  startingNumber Int

  performace Performance[]
  race       Race          @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId     Int

  @@unique([personalDataId, startingNumber, raceId])
}

model PersonalData {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  surname   String
  birthDate DateTime
  sex       String
  club      String

  racer  Racer[]
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

// Necessary for Next auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Roles:
  // Admin = 3,
  // RaceManager = 2,
  // EventManager = 1,
  // Racer = 0
  role         Int           @default(0)
  personalData PersonalData?

  ownedRaces    Race[] @relation(name: "owner")
  managingRaces Race[] @relation(name: "manager")

  accounts Account[]
  sessions Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
